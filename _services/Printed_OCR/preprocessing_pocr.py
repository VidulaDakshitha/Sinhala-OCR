import cv2
import numpy as np
import tensorflow as tf
import environ

from _config.bas64_image.convertor_image import GraytoRGB

env = environ.Env(
    DEBUG=(bool, False)
)
environ.Env.read_env()

#new_model = tf.keras.models.load_model(env('PROJECT_SRC')+'_models/printedOCR/model_new_2.h5')

array = ['ට්‍ය', 'අ', 'ඉ', 'ඊ', 'උ', 'එ', 'ඒ', 'ඔ', 'ඕ', 'ක', 'කි', 'කී', 'කු', 'කූ', 'ක්', 'ක්‍ර', 'ක්‍රි', 'ක්‍රී', 'ක්‍ර්',
'ග', 'ගි', 'ගී', 'ගු', 'ගූ', 'ග්', 'ග්‍ර', 'ග්‍ර්', 'ග්‍රි', 'ග්‍රී', 'ච', 'චි', 'චී', 'චු', 'චූ', 'ච්', 'ච්‍ර', 'ජ',
'ජි', 'ජී', 'ජ්', 'ජු', 'ජූ', 'ජ්‍ර', 'ට', 'ටි', 'ටී', 'ටු', 'ටූ', 'ට්‍ර', 'ට්‍රි', 'ට්', 'ඩ', 'ඩි', 'ඩී', 'ඩු',
'ඩූ', 'ඩ්', 'ඩ්‍ර', 'ඩ්‍රි', 'ණ', 'ණ්', 'ණි', 'ණී', 'ණු', 'ණූ', 'ත', 'ති', 'තී', 'තු', 'තූ', 'ත්', 'ත්‍ර', 'ත්‍රි',
'ත්‍රී', 'ද', 'දි', 'දී', 'දු', 'දූ', 'ද්', 'ද්‍ර', 'ද්‍රි', 'ද්‍රී', 'න', 'න්', 'නි', 'නී', 'නු', 'නූ', 'න්‍ර', 'න්‍රී',
'ප', 'ප්', 'පි', 'පී', 'පු', 'පූ', 'ප්‍ර', 'ප්‍රි', 'ප්‍රී', 'බ', 'බ්', 'බි', 'බී', 'බු', 'බූ', 'බ්‍ර', 'බ්‍රි', 'ම',
'ම්', 'මි', 'මී', 'මු', 'මූ', 'ය', 'ය්', 'යි', 'යී', 'යු', 'යූ', 'ර', 'ර්', 'රි', 'රී', 'රැ', 'රෑ', 'ල',
'ල්', 'ලි', 'ලී', 'ලු', 'ලූ', 'ව', 'ව්', 'වි', 'වී', 'වු', 'වූ', 'ව්‍ර', 'ශ', 'ශ්', 'ශි', 'ශී', 'ශු', 'ශූ',
'ශ්‍ර', 'ශ්‍රි', 'ශ්‍රී', 'ෂ', 'ෂ්', 'ෂි', 'ෂී', 'ෂු', 'ෂූ', 'ෂ්‍ර', 'ෂ්‍රි', 'ෂ්‍රී', 'ස', 'ස්', 'සි', 'සී', 'සු', 'සූ',
'ස්‍ර', 'ස්‍රි', 'හ', 'හ්', 'හි', 'හී', 'හු', 'හූ', 'ළ', 'ළ්', 'ළි', 'ළී', 'ළු', 'ෆ', 'ෆ්', 'ෆි', 'ෆී', 'ෆ්‍ර',
'ඝ', 'ඝ්', 'ඝි', 'ඝී', 'ඝු', 'ඝූ', 'ඝ්‍ර', 'ඝ්‍රි', 'ඝ්‍රී', 'එ', 'ඒ', 'ඹ', 'ඹ්', 'ඹි', 'ඹී', 'ඹු', 'ඹූ', 'භ',
'භ්', 'භි', 'භී', 'භු', 'භූ', 'භ්‍ර', 'ධ', 'ධ්', 'ධි', 'ධී', 'ධු', 'ධූ', 'ධ්‍ර', 'ඨ', 'ඨ්', 'ඨි', 'ඨී', 'ඨු',
'ඨූ', 'ඨ්‍ර', 'ථ', 'ථ්', 'ථි', 'ථී', 'ථු', 'ථූ', 'ථ්‍ර', 'ඵ', 'ඵ්', 'ඵි', 'ඵී', 'ඵු', 'ඵූ', 'ඵ්‍ර', 'ඡ', 'ඡ්',
'ඡි', 'ඡී', 'ඡු', 'ඡූ', 'ඪ', 'ඪ්', 'ඪි', 'ඪී', 'ඪු', 'ඪූ', 'ඛ', 'ඛ්', 'ඛි', 'ඛී', 'ස්‍ය', 'ක්‍ය', 'භ්‍ය', 'ය්‍ය',
'න්‍ය', 'ශ්‍ය', 'ත්‍ය', 'ව්‍ය', 'ග්‍ය', 'ද්‍ය', 'ජ්‍ය', 'ෂ්‍ය', 'ඳ', 'ඳු', 'ඟ', 'ඥ', 'හ්‍ය', 'ඛ්‍ය', 'ඬ', 'ඤ', 'ඤු', 'ඣ',
'ඣු', 'ඣ්', 'ඦ', 'ෙ', 'ා', 'ැ', 'ෘ', 'ෳ', 'ඃ', 'ං', 'ඤ්', 'ඦි', 'ප්‍ය', 'ඵ්‍ය', 'ල්‍ය', 'ඝ්‍ය', 'ච්‍ය']

def preProcessing(img):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.equalizeHist(img)
    img = img/255
    return img

def paddingImage(img):
    image = cv2.resize(img, (47, 47))
    ht, wd, cc = image.shape
    ww = 150
    hh = 150
    color = (0, 0, 0)
    result = np.full((hh, ww, cc), color, dtype=np.uint8)
    xx = (ww - wd) // 2
    yy = (hh - ht) // 2
    result[yy:yy + ht, xx:xx + wd] = image
    return result

def predictLetter(img,new_model):
    image = np.asarray(GraytoRGB(img))



    image = paddingImage(image)
    
    image = cv2.resize(image, (150, 150))
    image = preProcessing(image)


    image = image.reshape(1, 150, 150, 1)

    prediction = new_model.predict(image)

    pred=np.argmax(prediction[0], np.newaxis)

    pred_1 = np.amax(prediction)

    return pred,array[pred],"{:.2f}".format(pred_1 * 100)

    